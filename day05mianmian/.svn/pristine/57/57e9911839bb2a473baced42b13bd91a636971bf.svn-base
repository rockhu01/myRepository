package com.hu.mm.service;

import com.hu.mm.dao.PermissionDao;
import com.hu.mm.dao.RoleDao;
import com.hu.mm.dao.UserDao;
import com.hu.mm.pojo.Permission;
import com.hu.mm.pojo.Role;
import com.hu.mm.pojo.User;
import com.hu.pojo.utils.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Project：ssm
 * Date：2019/12/31
 * Time：18:55
 * Description：TODO
 *
 * @author huxiongjun
 * @version 1.0
 */
public class UserService {

    /**
     * 用户登录
     * @param loginUser
     * @return
     * @throws IOException
     */
    public User login(User loginUser) throws IOException {
       //定义角色权限列表集合
        ArrayList<String> authorityList = new ArrayList<>();

        //1.0使用Mybatis 调用dao查询数据库
        SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
        UserDao userDao = sqlSession.getMapper(UserDao.class);
        //调用查询用户方法
        User user = userDao.findUserByUsername(loginUser);
        //2.0 处理业务,通过比较两者的密码是否相同来判定是否登陆成功
        //3.0认证成功
        if(user != null && user.getPassword().equals(loginUser.getPassword())){
             //4.1授权,根据用户id得到对应的角色列表
            RoleDao roleDao = sqlSession.getMapper(RoleDao.class);
            List<Role> roleList = roleDao.selectRoleListByUserId(user.getId());
            if (roleList!=null&&roleList.size()>0){
                PermissionDao permissionDao = sqlSession.getMapper(PermissionDao.class);
                //遍历roleList 根据role得到对应的权限列表
                for (Role role : roleList) {
                    authorityList.add(role.getKeyword());
                    List<Permission> permissionList = permissionDao.selectPermissionByRoleId(role.getId());
                    if (permissionList!=null&&permissionList.size()>0){
                        for (Permission permission : permissionList) {
                             authorityList.add(permission.getKeyword());
                        }
                    }
                }
            }
            user.setAuthorityList(authorityList);
            SqlSessionFactoryUtils.commitAndClose(sqlSession);
            return user;
        }
        SqlSessionFactoryUtils.commitAndClose(sqlSession);
        return null;
    }
}
